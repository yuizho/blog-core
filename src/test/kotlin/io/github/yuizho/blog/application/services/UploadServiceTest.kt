package io.github.yuizho.blog.application.services

import com.nhaarman.mockito_kotlin.any
import com.nhaarman.mockito_kotlin.anyArray
import com.nhaarman.mockito_kotlin.whenever
import io.github.yuizho.blog.LocalUploadProperties
import io.github.yuizho.blog.UploadProperties
import io.github.yuizho.blog.application.exceptions.BadRequestException
import io.github.yuizho.blog.domain.models.*
import io.github.yuizho.blog.infrastructure.LocalFileIO
import io.github.yuizho.blog.infrastructure.S3Client
import io.github.yuizho.blog.infrastructure.repositories.LoggeinRepository
import io.github.yuizho.blog.infrastructure.repositories.UploadedRepository
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.Mock
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit.jupiter.SpringExtension
import java.net.URL

@ExtendWith(SpringExtension::class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
class UploadServiceTest(@Autowired val uploadProperties: UploadProperties,
                        @Autowired val localUploadProperties: LocalUploadProperties) {
    @Mock
    private lateinit var uploadedRepository: UploadedRepository

    @Mock
    private lateinit var loggedinRepository: LoggeinRepository

    @Mock
    private lateinit var localFileIO: LocalFileIO

    @Mock
    private lateinit var s3Client: S3Client

    @Test
    fun `handle and save image to local succeeded`() {
        val user = User(id = "user", password = Password("pass"))
        val token = Token("token")
        val uploaded = Uploaded(fileName = "xxx.png", fileUri = "/static/xxx.png", user = user)
        whenever(loggedinRepository.findByToken(Token("token")))
                .thenReturn(Loggedin(token = token, user = user))
        whenever(uploadedRepository.save(any<Uploaded>())).thenReturn(uploaded)

        val localUploadService = LocalUploadService(uploadedRepository,
                loggedinRepository, localUploadProperties, uploadProperties, localFileIO)
        val actual = localUploadService.handleAndStoreImage(
                "",
                "token")

        assertThat(actual).isEqualTo(uploaded)
    }

    @Test
    fun `handle and save image to s3 succeeded`() {
        val user = User(id = "user", password = Password("pass"))
        val token = Token("token")
        val uploaded = Uploaded(fileName = "xxx.png", fileUri = "http://example.com/xxx.png", user = user)
        whenever(s3Client.uploadAndGetUrl(any(), any()))
                .thenReturn(URL("http://example.com/xxx.png"))
        whenever(loggedinRepository.findByToken(Token("token")))
                .thenReturn(Loggedin(token = token, user = user))
        whenever(uploadedRepository.save(any<Uploaded>())).thenReturn(uploaded)

        val localUploadService = S3UploadService(uploadedRepository,
                loggedinRepository, uploadProperties, s3Client)
        val actual = localUploadService.handleAndStoreImage(
                "",
                "token")

        assertThat(actual).isEqualTo(uploaded)
    }

    @Test
    fun `the passed base64File is not image`() {
        val localUploadService = LocalUploadService(uploadedRepository,
                loggedinRepository, localUploadProperties, uploadProperties, localFileIO);
        val actualExcetion =
                Assertions.assertThrows(BadRequestException::class.java) {
                    localUploadService.handleAndStoreImage(
                            "yv66vgAAADQAPAEAKWlvL2dpdGh1Yi95dWl6aG8vYmxvZy9CbG9nQ29yZUFwcGxpY2F0aW9uBwABAQAQamF2YS9sYW5nL09iamVjdAcAAwEAPkxvcmcvc3ByaW5nZnJhbWV3b3JrL2Jvb3QvYXV0b2NvbmZpZ3VyZS9TcHJpbmdCb290QXBwbGljYXRpb247AQBLTG9yZy9zcHJpbmdmcmFtZXdvcmsvYm9vdC9jb250ZXh0L3Byb3BlcnRpZXMvRW5hYmxlQ29uZmlndXJhdGlvblByb3BlcnRpZXM7AQAFdmFsdWUBAC1MaW8vZ2l0aHViL3l1aXpoby9ibG9nL0xvY2FsVXBsb2FkUHJvcGVydGllczsBAChMaW8vZ2l0aHViL3l1aXpoby9ibG9nL1VwbG9hZFByb3BlcnRpZXM7AQATZGF0YWJhc2VJbml0aWFsaXplcgEAcChMaW8vZ2l0aHViL3l1aXpoby9ibG9nL2luZnJhc3RydWN0dXJlL3JlcG9zaXRvcmllcy9Vc2VyUmVwb3NpdG9yeTspTG9yZy9zcHJpbmdmcmFtZXdvcmsvYm9vdC9Db21tYW5kTGluZVJ1bm5lcjsBAA51c2VyUmVwb3NpdG9yeQEALUxvcmcvc3ByaW5nZnJhbWV3b3JrL2NvbnRleHQvYW5ub3RhdGlvbi9CZWFuOwEAI0xvcmcvamV0YnJhaW5zL2Fubm90YXRpb25zL05vdE51bGw7CAAMAQAea290bGluL2p2bS9pbnRlcm5hbC9JbnRyaW5zaWNzBwAQAQAXY2hlY2tQYXJhbWV0ZXJJc05vdE51bGwBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9TdHJpbmc7KVYMABIAEwoAEQAUAQA/aW8vZ2l0aHViL3l1aXpoby9ibG9nL0Jsb2dDb3JlQXBwbGljYXRpb24kZGF0YWJhc2VJbml0aWFsaXplciQxBwAWAQAGPGluaXQ+AQBFKExpby9naXRodWIveXVpemhvL2Jsb2cvaW5mcmFzdHJ1Y3R1cmUvcmVwb3NpdG9yaWVzL1VzZXJSZXBvc2l0b3J5OylWDAAYABkKABcAGgEAKm9yZy9zcHJpbmdmcmFtZXdvcmsvYm9vdC9Db21tYW5kTGluZVJ1bm5lcgcAHAEABHRoaXMBACtMaW8vZ2l0aHViL3l1aXpoby9ibG9nL0Jsb2dDb3JlQXBwbGljYXRpb247AQBCTGlvL2dpdGh1Yi95dWl6aG8vYmxvZy9pbmZyYXN0cnVjdHVyZS9yZXBvc2l0b3JpZXMvVXNlclJlcG9zaXRvcnk7AQADKClWDAAYACEKAAQAIgEAEUxrb3RsaW4vTWV0YWRhdGE7AQACbXYDAAAAAQMAAAALAQACYnYDAAAAAAMAAAACAQABawEAAmQxAQBFwIAYCgIYAgoCEMCACgIIAgoCGAIKwIAKAhgCCsCACBcYwIAyAjABQgXCogYCEAJKEBADGgIwBDIGEAUaAjAGSBfCqAYHAQACZDIBAAABACxMb3JnL3NwcmluZ2ZyYW1ld29yay9ib290L0NvbW1hbmRMaW5lUnVubmVyOwEACWJsb2ctY29yZQEAFkJsb2dDb3JlQXBwbGljYXRpb24ua3QBAARDb2RlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAPTGluZU51bWJlclRhYmxlAQAQTWV0aG9kUGFyYW1ldGVycwEAGVJ1bnRpbWVWaXNpYmxlQW5ub3RhdGlvbnMBABtSdW50aW1lSW52aXNpYmxlQW5ub3RhdGlvbnMBACRSdW50aW1lSW52aXNpYmxlUGFyYW1ldGVyQW5ub3RhdGlvbnMBAApTb3VyY2VGaWxlAQAMSW5uZXJDbGFzc2VzACEAAgAEAAAAAAACAAEACgALAAUAMwAAAEoAAwACAAAAEisSD7gAFbsAF1krtwAbwAAdsAAAAAIANAAAABYAAgAAABIAHgAfAAAAAAASAAwAIAABADUAAAAKAAIABgAZABEAHgA2AAAABQEADAAAADcAAAAGAAEADQAAADgAAAAGAAEADgAAADkAAAAHAQABAA4AAAABABgAIQABADMAAAAvAAEAAQAAAAUqtwAjsQAAAAIANAAAAAwAAQAAAAUAHgAfAAAANQAAAAYAAQAAABcAAwA6AAAAAgAyADsAAAAKAAEAFwAAAAAAGAA3AAAAXwADAAUAAAAGAAEAB1sAAmMACGMACQAkAAUAJVsAA0kAJkkAJkkAJwAoWwADSQAmSQApSQAqACtJACYALFsAAXMALQAuWwAIcwAfcwAvcwAhcwAKcwAwcwAMcwAgcwAx",
                            "token")
                }
        assertThat(actualExcetion).isNotNull();
    }
}